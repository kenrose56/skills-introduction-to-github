import numpy as np
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.svm import SVC

# Generate a synthetic binary cLassification dataset
X, y = make_classification(n_samples=1000, n_features=20, n_informative=15,
n_redundan t=S, n_classe s=2, random_state=42 )

# SpLit into training and test sets
X_train, X_test, y_train, y_test = train_test_split(
X, y, test_siz=e0.2, random_state=42


# Define the parameter grid for hyperparameter tuning
parameters = {
 
'C': [0.1, 1, 10, 100],
'kernel': ['linear', 'rbf'],
'gamma': [ 'scale', 'auto']
}
 
# ReguLarization parameter
# KerneL type
# KerneL coefficient for 'rbf'
 

# Create the SVM cLassifier object
svm = SVC()

#Setup GridSearchCV with 10-foLd cross-vaLidation
svm_cv = GridSearchCV(estimator=svm, param_grid=parameters, cv=10, scoring='accuracy)'

# Fit to training data to find the best hyperparameters
svm_cv.fit(X_train, y_train)

# Output the best hyperparameters
print("Best parameters found:", svm_cv. best_params_)

# EvaLuate the best modeL on the test data
test_accurayc=  svm_cv.score(X _test, y_test)
print(f"Test set accuracy: { test_accuracy:.2f)")
